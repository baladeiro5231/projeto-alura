# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wfPfqtlj9SuXDcZRIl47C2zcoG8rYo9u
"""



# Commented out IPython magic to ensure Python compatibility.
# %pip -q install google-genai

# Configura a API Key do Google Gemini

import os
from google.colab import userdata

os.environ["GOOGLE_API_KEY"] = userdata.get('GOOGLE_API_KEY')

# Configura o cliente da SDK do Gemini

from google import genai

client = genai.Client()

MODEL_ID = "gemini-2.0-flash"

# Pergunta ao Gemini uma informação mais recente que seu conhecimento

from IPython.display import HTML, Markdown

# Perguntar pro modelo quando é a próxima imersão de IA ###############################################
resposta = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando é a próxima Imersão IA com Google Gemini da Alura?',
)

# Exibe a resposta na tela
display(Markdown(f"Response:\n {resposta.text}"))

# Pergunta ao Gemini uma informação utilizando a busca do Google como contexto

response = client.models.generate_content(
    model=MODEL_ID,
    contents='Quando é a próxima Imersão IA com Google Gemini da Alura?',
    config={"tools": [{"google_search": {}}]}
)

# Exibe a resposta na tela
display(Markdown(f"Resposta:\n {response.text}"))

# Exibe a busca
print(f"Busca realizada: {response.candidates[0].grounding_metadata.web_search_queries}")
# Exibe as URLs nas quais ele se baseou
print(f"Páginas utilizadas na resposta: {', '.join([site.web.title for site in response.candidates[0].grounding_metadata.grounding_chunks])}")
print()
display(HTML(response.candidates[0].grounding_metadata.search_entry_point.rendered_content))

# Instalar Framework de agentes do Google ################################################
!pip install -q google-adk

from google.adk.agents import Agent
from google.adk.runners import Runner
from google.adk.sessions import InMemorySessionService
from google.adk.tools import google_search
from google.genai import types  # Para criar conteúdos (Content e Part)
from datetime import date
import textwrap # Para formatar melhor a saída de texto
from IPython.display import display, Markdown # Para exibir texto formatado no Colab
import requests # Para fazer requisições HTTP
import warnings

warnings.filterwarnings("ignore")

# Função auxiliar que envia uma mensagem para um agente via Runner e retorna a resposta final
def call_agent(agent: Agent, message_text: str) -> str:
    # Cria um serviço de sessão em memória
    session_service = InMemorySessionService()
    # Cria uma nova sessão (você pode personalizar os IDs conforme necessário)
    session = session_service.create_session(app_name=agent.name, user_id="user1", session_id="session1")
    # Cria um Runner para o agente
    runner = Runner(agent=agent, app_name=agent.name, session_service=session_service)
    # Cria o conteúdo da mensagem de entrada
    content = types.Content(role="user", parts=[types.Part(text=message_text)])

    final_response = ""
    # Itera assincronamente pelos eventos retornados durante a execução do agente
    for event in runner.run(user_id="user1", session_id="session1", new_message=content):
        if event.is_final_response():
          for part in event.content.parts:
            if part.text is not None:
              final_response += part.text
              final_response += "\n"
    return final_response

# Função auxiliar para exibir texto formatado em Markdown no Colab
def to_markdown(text):
  text = text.replace('•', '  *')
  return Markdown(textwrap.indent(text, '> ', predicate=lambda _: True))

##########################################
# --- Agente 1: Buscador de Notícias --- #
##########################################
def agente_buscador(topico, data_de_hoje):

    buscador = Agent(
        name="agente_buscador",
        model="gemini-2.0-flash",
        instruction="""
        encontrar e refinar a centelha inicial da história,
        fornecendo um vasto leque de referências e estímulos criativos.
        O usuário fornece um tema, gênero, uma imagem, uma música,
        um personagem vago ou qualquer ponto de partida.
        passo" "Busca Ampla de Referências",
        detalhes":Com base na entrada, buscar:
        Visuais: Artes conceituais, fotografias de locais (reais ou fictícios),
        paletas de cores, design de figurinos, arquitetura relevante ao tema/gênero.
        Narrativas: Sinopses de livros, filmes, séries, jogos com temas ou estruturas semelhantes ao que o usuário escolheu de tema
        Arquétipos de personagens comuns. Mitologias, lendas e fatos históricos relacionados.
        Sonoras: Tipos de música, trilhas sonoras ou artistas que evocam o clima/atmosfera desejada.

        Conceituais: Artigos sobre os temas centrais da ideia (ex: se for sobre viagem no tempo,
        artigos sobre teorias; se for fantasia medieval, sobre costumes da época).
        passo" "Identificação de Elementos-Chave",
        detalhes: Analisar as referências e destacar 2-3 conceitos, imagens ou ideias mais fortes"
        e recorrentes que podem servir como pilares iniciais."

        Um 'mood board' digital com links para as referências mais impactantes (visuais, sonoras, textuais).",
        Um breve resumo dos temas e conceitos mais promissores identificados.",
        entregar ao usuário a pensar sobre a direção inicial da história"
        ex: Qual desses ambientes te inspira mais para o início da sua história",
        crie um  tipo de conflito referente as refêrncias que você achou você imagina surgindo a partir deste tema e converse com tudo que você já criou""",

        tools=[google_search]
     )


    entrada_do_agente_buscador = f"Tópico: {topico}\nData de hoje: {data_de_hoje}"

    lancamentos = call_agent(buscador, entrada_do_agente_buscador)
    return lancamentos

################################################
# --- Agente 2: Planejador de posts --- #
################################################
def agente_planejador(topico, lancamentos_buscados):
    planejador = Agent(
        name="agente_planejador",
        model="gemini-2.0-flash",
        # Inserir as instruções do Agente Planejador #################################################
        instruction="""
            funcao_principal": a construir o universo da história e a dar vida aos personagens principais,
            com base nas inspirações do Agente 1 e na escolha principal do usuário."",

            a partir da saída do Agente 1,
            e respostas às perguntas estimulantes.,
            acao_agente": "Desenvolvimento do Ambiente (Worldbuilding)'':
            Aprofundamento em Referências: Com base nas escolhas do agente 1"
            buscar mais detalhes: arquitetura específica, tecnologias predominantes, organização social, clima detalhado, época do ano.
            Definição de Regras: Ajudar a estabelecer as regras básicas do mundo ('físicas, mágicas, sociais, tecnológicas).
            Criação de Locais Chave: Esboçar 2-3 locais importantes onde a história pode se desenrolar,
            com descrições sensoriais e referências visuais específicas.
            Criação de Personagens:
            Protagonistas:'
            Perfil Básico: Nome, idade aproximada, ocupação/papel no mundo refente ao tema ou que faça sentido com o a ideia do agente 1
            Referências Visuais Específicas: Buscar imagens de pessoas reais ou personagens
            fictícios que se alinhem com a descrição emergente.
            Personalidade Inicial: Com base nas referências e no tema, sugerir 2-3
            traços de personalidade centrais.
            Motivação/Desejo Inicial: Defenir os  objetivos primários dos protagonistas no início da história.
            Antagonista e Aliados Chave,  se já vislumbrados: Repetir o processo de forma mais simplificada.
            Integração Personagem-Ambiente:

            saida_para_usuario: Um documento descritivo do ambiente: Nome do mundo/local, época, estação do ano,
            características principais, regras básicas, descrição de locais chave com
            referências visuais e sonoras.
            crie Fichas preliminares dos personagens principais: Nome, perfil, referências visuais,
            traços de personalidade, motivação inicial, e como se encaixam no mundo.
            Sugestões de "práticas" "Tente descrever um dia típico do seu protagonista neste ambiente.
            ou "Quais são os maiores desafios que este personagem enfrentaria neste lugar? crie uma resposta a essa pergunta responda em pelo menos 5 parágrafos
            """,


            description="FOCAR NA IDEIA APRESENTADA pelo agente 1",
            tools=[google_search]

    )

    entrada_do_agente_planejador = f"Tópico:{topico}\nLançamentos buscados: {lancamentos_buscados}"
    # Executa o agente
    plano_do_post = call_agent(planejador, entrada_do_agente_planejador)
    return plano_do_post

######################################
# --- Agente 3: Redator do Post --- #
######################################
def agente_redator(topico, plano_de_post):
    redator = Agent(
        name="agente_redator",
        model="gemini-2.0-flash",
        instruction="""
           funcao_principal": refinar toda as idéias do agente 1, com isso criar o mundo e em uma estrutura narrativa coesa,
           definindo o enredo principal, conflitos e pontos de virada,
           crie no mínimo 20 páginas de conteúdo baseado em tudo que você já criou até agora.
           Todas as páginas devem estar cheias de detalhes da cena de pelo menos 5 parágrafos cada página, tem que ter uma pequenos comentários explicando o porque você você decidiu fazer isso.
           nessa história todas as decisões dos personagens tem qu efazer sentido com todo o plano já criado pelos dois agentes anteriores
           Deve ser um roteiro claro, coeso, com falas quando necessário
           nporém tem que ter coesão com o tema escolhido pelo usuário e ter coesão com as informações criadas para o plano dos agentes 1 e 2

            """,
        description="Agente redator de posts engajadores para Instagram"
    )
    entrada_do_agente_redator = f"Tópico: {topico}\nPlano de post: {plano_de_post}"
    # Executa o agente
    rascunho = call_agent(redator, entrada_do_agente_redator)
    return rascunho

##########################################
# --- Agente 4: Revisor de Qualidade --- #
##########################################
def agente_revisor(topico, rascunho_gerado):
    revisor = Agent(
        name="agente_revisor",
        model="gemini-2.0-flash",
        instruction="""
           funcao_principal": Revisar o plano da história (mundo, personagens, enredo e roteiro geral) para garantir clareza, coesão, consistência e impacto, oferecendo sugestões
           para um roteiro "minimamente publicável" (no sentido de estar pronto para
           ser escrito em prosa ou formato de roteiro final)

           modus_operandi_adaptado": {
           entrada_usuario": O plano completo da história, incluindo as descrições de mundo,
           fichas de personagem e o roteiro geral/outline produzido com o Agente 3.,
           acao_agente": "Análise de Clareza e Coesão:
           O enredo é fácil de seguir?
           As motivações dos personagens são claras?
           As informações cruciais são apresentadas no momento certo?
           O começo, meio e fim estão bem conectados?

           Consistência Interna:
           As regras do mundo são respeitadas ao longo da trama?
           Os personagens agem de acordo com suas personalidades e históricos estabelecidos?
           Existem furos de roteiro (plot holes) óbvios?

           Desenvolvimento de Personagem:
           Os arcos dos personagens principais são perceptíveis e significativos?
           Eles mudam ou aprendem algo?

           Ritmo e Tensão:
           O roteiro geral sugere um bom equilíbrio entre momentos de ação, desenvolvimento e calmaria?
           Os pontos de virada e o clímax têm o impacto desejado?

           Verificação de Informações Cruciais e Gerais:
           Todos os elementos importantes definidos anteriormente (ambiente, tempo, época do ano,
           personalidades) estão refletidos ou implícitos no roteiro geral?
           As informações gerais sobre os personagens são suficientes para entender suas ações?

           Qualidade 'Minimamente Publicável':
           O plano é sólido o suficiente para que alguém possa pegar esse material e
           começar a escrever a história em prosa ou em formato de roteiro profissional
           sem grandes lacunas conceituais?,
           saida_para_usuario": { # Mantive esta parte como dicionário porque tem condições diferentes
           se_plano_robusto": "Seu plano de história está muito bem estruturado e pronto para a próxima fase: a escrita!
           Os elementos de mundo, personagem e enredo estão coesos e promissores.
           caso_haja_problemas": ""Apontar especificamente as áreas que precisam de melhoria
           (ex: "A motivação do antagonista no Ato 2 parece um pouco vaga.
           Que tal explorar [referência X] ou pensar sobre [pergunta Y]?").

           Sugerir revisões no roteiro geral, como reordenar cenas,
           adicionar momentos de reflexão para personagens, ou intensificar um conflito.

           Oferecer referências de como outras histórias resolveram problemas semelhantes de estrutura ou desenvolvimento de personagem.
           propor_exercicios_revisao": Releia o arco do seu protagonista. Ele realmente muda do começo ao fim?
           Como você pode tornar essa mudança mais evidente no roteiro geral? com base em tu

           """,
        description="Agente revisor de textplanejamento,  e criação de roteiro",
        tools=[google_search]
)
    entrada_do_agente_revisor = f"Tópico: {topico}\nRascunho: {rascunho_gerado}"
    # Executa o agente
    texto_revisado = call_agent(revisor, entrada_do_agente_revisor)
    return texto_revisado



from decimal import Context
# prompt: quero conversar com a ia


def chat_com_agentes(topico):
    data_atual = date.today().strftime("%d/%m/%Y")

    print("Iniciando busca de referências...")
    lancamentos = agente_buscador(topico, data_atual)
    display(to_markdown(f"**Referências encontradas:**\n{lancamentos}"))

    print("\nIniciando planejamento do post...")
    plano = agente_planejador(topico, lancamentos)
    display(to_markdown(f"**Plano de história:**\n{plano}"))

    print("\nGerando rascunho da história...")
    rascunho = agente_redator(topico, plano)
    display(to_markdown(f"**Rascunho da história:**\n{rascunho}"))

    print("\nRevisando a história...")
    texto_final = agente_revisor(topico, rascunho)
    display(to_markdown(f"**Revisão da história:**\n{texto_final}"))

    contexto = ""

    contexto += f"**Referências encontradas:**\n{lancamentos}\n"
    contexto += f"**Plano de história:**\n{plano}\n"
    contexto += f"**Rascunho da história:**\n{rascunho}\n"
    contexto += f"**Revisão da história:**\n{texto_final}\n"
    return contexto

# Exemplo de uso:
topico_da_historia = input("Digite o tópico da história que você quer criar: ")
Context=chat_com_agentes(topico_da_historia)

######################################
# --- Agente 5: DIRETOR--- #
######################################
def agente_diretor(prompt):
    diretor = Agent(
        name="agente_diretor",
        model="gemini-2.0-flash",
        instruction=f"Voce e o BC (Boss Criativo), Chefe altamente competente e descolado do Departamento de Ideias e Criatividade. Respoda o usuário somente com o conehcimeto que você coletou com suas ferramentas\n**contexto:** {Context}",
        description="Agente diretor de posts engajadores para Instagram",

    )

    # Executa o agente
    finalizacao = call_agent(diretor, prompt)
    return finalizacao





# prompt: quero conversar com a ia

def chat_com_diretor(prompt):


    print("\nRevisando a história...")
    texto_final = agente_diretor(prompt)
    display(to_markdown(f"**Revisão da história:**\n{texto_final}"))

# Exemplo de uso:
resposta_final = input("Digite o que você deseja criar: ")
while resposta_final != "sair":

  chat_com_diretor(resposta_final)
  resposta_final = input("Digite o que você deseja criar: ")